#!/usr/bin/env node

/*
  Module dependencies
*/
var fs = require('fs'),
    path = require('path'),
    existsSync = path.existsSync,
    resolve = path.resolve,
    join = path.join,
    thimble = require('../'),
    program = require('commander'),
    _ = require('underscore'),
    utils = thimble.utils,
    relative = utils.relative,
    cwd = process.cwd(),
    locals  = {},
    options = {};

// Get thimble's version
program
  .version(thimble.version)
  .usage('[options] [app]');
  
// Thimble's options
program
  .option('-r, --root <dir>', 'root directory - [required] where your source application lives')
  .option('-b, --build <dir>', 'build directory - [required] where your compiled will be placed')
  .option('-p, --public <dir>', 'public directory - [required] where your static assets will be placed')
  .option('-s, --source <file>', 'source - application entry point, required if no default argument')
  .option('-l, --layout <file>', 'layout - application layout to be included in the build');
  // .option('-o, --options <file>', 'options - specify an options file for thimble to load');
  
// Support for thimble.opts
try {
  var opts = fs.readFileSync('thimble.opts', 'utf8')
    .trim()
    .split(/\s+/);

  process.argv = process.argv
    .slice(0, 2)
    .concat(opts.concat(process.argv.slice(2)));
} catch (err) {
  // ignore
}

// Parse the args
program.parse(process.argv);

// Application entry point
var source = program.args[0] || program.source;

// Ensure we have specified the required parameters
if (!source) {
  console.log('Error: you didn\'t specify a source file');
  process.exit();
} else if (!program.root) {
  console.log('Error: you didn\'t specify a root directory');
  process.exit();
} else if (!program.build) {
  console.log('Error: you didn\'t specify a build directory');
  process.exit();
} else if (!program.public) {
  console.log('Error: you didn\'t specify a public directory');
  process.exit();
}



// Load in the options
options.root = join(cwd, program.root);
options.build = join(cwd, program.build);
options.public = join(cwd, program.public);

// Check a few paths for the source
var relativeSource = join(options.root, source), 
    absoluteSource = resolve(source);
    
if(existsSync(absoluteSource)) {
  source = relative(options.root, absoluteSource);
} else if (!existsSync(relativeSource)) {
  throw new Error('Cannot find source provided: ' + source);
}


// Add a layout if specified
if(program.layout) {
  // Check a few paths for the layout
  var layout = program.layout,
      relativeLayout = join(options.root, layout), 
      absoluteLayout = resolve(layout);
  
  
  if(existsSync(absoluteLayout)) {
    layout = relative(options.root, absoluteLayout);
  } else if (!existsSync(relativeLayout)) {
    throw new Error('Cannot find source provided: ' + layout);
  }
  
  locals.layout = layout
}


// Dont compile the template
options.compile = false;

// Add the options to thimble
thimble(options);

// Configure thimble
thimble.configure(function(use) {
  use(thimble.flatten());
  use(thimble.embed());
  use(thimble.bundle());
  use(thimble.package());
});

thimble.render(source, locals, function(err, content) {
  if(err) {
    console.log(err.message);
    process.exit();
  }
  
  console.log("Thimble successfully built your application");
  process.exit();
});