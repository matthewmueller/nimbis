#!/usr/bin/env node

var program = require('commander'),
    exec = require('child_process').exec,
    spawn = require('child_process').spawn,
    path = require('path'),
    join = path.join,
    basename = path.basename,
    fs = require('fs'),
    cwd = path.resolve(__dirname+'/..');

/*
  Development Information
*/
var host = 'http://localhost:3000';

/*
  Version
*/
program.version('0.0.1');

/*
  Directories to search
*/
var directories = ['/client', '/server'];

/*
  API: Create
*/
program
  .command('create <file>')
  .description('creates the boilerplate for a view, model, or collection')
  .action(function(cmd, options) {
    console.log('Hold tight! Not yet implemented...');
  });

/*
  API: Edit

  Usage: nimbis edit <file|directory>


*/
program
  .command('edit <file>')
  .description('Usage: nimbis edit models')
  .option('-e, --editor <editor>', 'Terminal command to open up editor (ex. mate, subl, vim)')
  .action(function(file, options) {
    var editor = options.editor || 'subl';

    find(file, 'client', function(err, path) {
      if(err) throw err;

      // Fix for sublime - probably just temp solution
      path = path.replace(cwd + '/', '');

      // $ mate|subl file/dir path
      exec(editor + ' ' + path);
    });

  });

/*
  API: Test
*/
program
  .command('test <file>')
  .description('test a given file')
  .action(function(cmd, options) {
    console.log('Hold tight! Not yet implemented...');
  });

/*
  API: View

  Usage : nimbis view <ui> 

  The `ui` is a fuzzy match, so `sha` will expand to `ShareComment`
*/
program
  .command('view <ui>')
  .description('Usage: nimbis view sharemessage')
  .action(function(ui, options) {
    find(ui, 'client/views', function(err, path) {
      if(err) throw err;
      path = basename(path);
      
      var url = join(host, 'examples', path);

      spawn('open', [url]);
    });
  });

/*
  Default to help
*/
program
  .command('*')
  .action(function(cmd, options) {
    console.log(program.commandHelp());
  });

/*
  Helpers
*/

/*
  Semi-fuzzy file/directory search

  Prefers directories over files  
*/
var find = function(query, base, fn) {
  query = '/' + basename(query);
  var regex = new RegExp(query, 'i');

  var search = function(err, found) {
    if(err) throw err;
    var items = found.files.concat(found.dirs.reverse());

    for (var i = items.length - 1; i >= 0; i--) {
      if(regex.test(items[i])) {
        return fn(null, items[i]);
      }
    }

    return fn(new Error('No file found!'));
  };

  readdirRecursive(join(cwd, base), search);
};

/*
  readdirRecursive searches a directory recursively

  returns an object containing `files` and `dirs`.
*/
function readdirRecursive(start, callback) {
    // Use lstat to resolve symlink if we are passed a symlink
    fs.lstat(start, function(err, stat) {
        if(err) {
            return callback(err);
        }
        var found = {dirs: [], files: []},
            total = 0,
            processed = 0;
        function isDir(abspath) {
            fs.stat(abspath, function(err, stat) {
                if(stat.isDirectory()) {
                    found.dirs.push(abspath);
                    // If we found a directory, recurse!
                    readdirRecursive(abspath, function(err, data) {
                        found.dirs = found.dirs.concat(data.dirs);
                        found.files = found.files.concat(data.files);
                        if(++processed == total) {
                            callback(null, found);
                        }
                    });
                } else {
                    found.files.push(abspath);
                    if(++processed == total) {
                        callback(null, found);
                    }
                }
            });
        }
        // Read through all the files in this directory
        if(stat.isDirectory()) {
            fs.readdir(start, function (err, files) {
                total = files.length;
                for(var x=0, l=files.length; x<l; x++) {
                    isDir(path.join(start, files[x]));
                }
            });
        } else {
            return callback(new Error("path: " + start + " is not a directory"));
        }
    });
}

// Parse the arguments
program.parse(process.argv);
